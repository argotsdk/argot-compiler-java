apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'com.bmuschko.nexus'

buildscript {
  repositories {
    maven {
      jcenter()
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "org.javamodularity:moduleplugin:1.5.0"
    classpath 'com.bmuschko:gradle-nexus-plugin:2.3.1'
  }
}

// Development environments
apply plugin: 'idea'
apply plugin: 'eclipse'
eclipse {

    classpath {
        defaultOutputDir = new File("$buildDir/eclipse");
        file {
            whenMerged {
                entries.findAll { isModule(it) }.each {
                    it.entryAttributes['module'] = 'true'
                }

                entries.findAll { isSource(it) && isTestScope(it) }.each {
                    it.entryAttributes['test'] = 'true'
                }

                entries.findAll { isLibrary(it) && isTestScope(it) }.each {
                    it.entryAttributes['test'] = 'true'
                }
            }
        }
    }

}

group = 'org.argot-sdk'
version = '1.4.0'

sourceCompatibility = 11
targetCompatibility = 11



repositories {
    maven { url "http://repo.maven.apache.org/maven2" }
}


apply plugin: 'antlr'



configurations {
    compile {
        extendsFrom = extendsFrom.findAll { it != configurations.antlr }
    }
}

dependencies {

    // https://mvnrepository.com/artifact/org.argot-sdk/argot
    compile group: 'org.argot-sdk', name: 'argot', version: '1.4.0-rc1'
   
    
    // https://mvnrepository.com/artifact/org.antlr/antlr4
    antlr group: 'org.antlr', name: 'antlr4', version: '4.7.2'
    
    // https://mvnrepository.com/artifact/org.antlr/antlr4-runtime
    compile group: 'org.antlr', name: 'antlr4-runtime', version: '4.7.2'
    
}

test {
	useJUnitPlatform()
}


generateGrammarSource {
    maxHeapSize = "64m"
    arguments += ["-visitor", "-long-messages"]

    // Keep a copy of generated sources
    doLast {
        println "Copying generated grammar lexer/parser files to main directory."
        copy {
            from "${buildDir}/generated-src/antlr/main"
            into "src/main/antlr"
        }
    }
}

clean.doLast {
    file('generated-src').deleteDir()
}

compileJava {
    //inputs.property("moduleName", moduleName)
    doFirst {
        options.compilerArgs = [
            '--module-path', classpath.asPath,
        ]
        classpath = files()
    }
}

javadoc {
  //inputs.property("moduleName", moduleName)
  doFirst {
    options.addStringOption('-module-path', classpath.asPath)
  }
}


buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.bmuschko:gradle-nexus-plugin:2.3.1'
    }
}

modifyPom {
    project {
        name 'Argot Compiler'
        description 'Argot dictionary compiler.'
        url 'http://www.argot-sdk.org/'
        packaging 'jar'
        licenses {
            license {
                url 'https://github.com/argotsdk/argot-java/blob/master/LICENSE.TXT'
            }
        }
        scm {
            url 'https://github.com/argotsdk/argot-compiler-java'
            connection 'scm:git:https://github.com/argotsdk/argot-compiler-java.git'
            developerConnection 'scm:git@github.com:argotsdk/argot-compiler-java.git'
        }
        developers {
            developer {
                id 'oobles'
                name 'David Ryan'
            }
            developer {
                id 'danmidwood'
                name 'Dan Midwood'
            }
        }

    }
}


boolean isLibrary(entry) {
  return entry.properties.kind.equals('lib') || entry.properties.kind.equals('src')
}
boolean isTestScope(entry) {
  return entry.entryAttributes.get('gradle_used_by_scope').equals('test'); }
boolean isModule(entry) {
  return isLibrary(entry) && !isTestScope(entry); }
boolean isSource(entry) { return entry.properties.kind.equals('src'); }

