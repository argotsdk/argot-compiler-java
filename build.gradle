apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'nexus'

group = 'org.argot-sdk'
version = '1.3.7-SNAPSHOT'

sourceCompatibility = 1.5
targetCompatibility = 1.5



repositories {
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/groups/public" }
}

configurations {
    antlr3
}

dependencies {
    compile group: 'org.antlr', name: 'antlr-runtime', version:'3.0.1'
    compile group: 'org.apache.ant', name: 'ant', version:'1.8.2'
    compile group: 'org.argot-sdk', name: 'argot', version:'1.3.7-SNAPSHOT'
    testCompile group: 'junit', name: 'junit', version:'4.11'
    antlr3 "org.antlr:antlr:3.0.1"
}


// ANTLR START
// The official antlr plugin doesn't support antlr 3 grammers, the following
// is taken from http://tapestryjava.blogspot.co.uk/2011/03/combining-gradle-with-antlr3.html
// where the author has already worked out a solution
//
// There is a pull request adding antlr 3 support to the gradle antlr plugin
// available at https://github.com/gradle/gradle/pull/69, however it has been
// languishing unmerged for almost two years. There was a discussion shortly
// after the request arguing whether there should be one antlr plugin for all
// versions or a plugin for each version, that discussion seems to have stalled
// and be the reason this PR is in limbo.
//
// Anyway, if the PR is accepted, we can remove this block and the "antlr3"
// configuration and dependency.

antlrSource = "src/main/antlr"
antlrOutput = "$buildDir/generated-sources/antlr"


sourceSets.main.java.srcDir antlrOutput

// This may spin out as a plugin once we've got the details down pat

task generateGrammarSource {
    description = "Generates Java sources from Antlr3 grammars."
    inputs.dir file(antlrSource)
    outputs.dir file(antlrOutput)
} << {
    mkdir(antlrOutput)

    // Might have a problem here if the current directory has a space in its name

    def grammars = fileTree(antlrSource).include("**/*.g")

    ant.java(classname: 'org.antlr.Tool', fork: true, classpath: "${configurations.antlr3.asPath}") {
        arg(line: "-o ${antlrOutput}/com/argot/compiler")
        arg(line: grammars.files.join(" "))
    }
}

compileJava.dependsOn generateGrammarSource

// ANTLR END


buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'org.gradle.api.plugins:gradle-nexus-plugin:0.7'
    }
}

modifyPom {
    project {
        name 'Argot Compiler'
        description 'Argot dictionary compiler.'
        url 'http://www.argot-sdk.org/'
        packaging 'jar'
        licenses {
            license {
                url 'https://github.com/argotsdk/argot-java/blob/master/LICENSE.TXT'
            }
        }
        scm {
            url 'https://github.com/argotsdk/argot-compiler-java'
            connection 'scm:git:https://github.com/argotsdk/argot-compiler-java.git'
            developerConnection 'scm:git@github.com:argotsdk/argot-compiler-java.git'
        }
        developers {
            developer {
                id 'oobles'
                name 'David Ryan'
            }
            developer {
                id 'danmidwood'
                name 'Dan Midwood'
            }
        }

    }
}

