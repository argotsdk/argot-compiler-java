/*
 * Copyright 2003-2007 (c) Live Media Pty Ltd. <argot@einet.com.au> 
 *
 * This software is licensed under the Argot Public License 
 * which may be found in the file LICENSE distributed 
 * with this software.
 *
 * More information about this license can be found at
 * http://www.einet.com.au/License
 * 
 * The Developer of this software is Live Media Pty Ltd,
 * PO Box 4591, Melbourne 3001, Australia.  The license is subject 
 * to the law of Victoria, Australia, and subject to exclusive 
 * jurisdiction of the Victorian courts.
 */
 
 /* 
 * This is the network virtual machine types.
 */

!import empty;
!import uint8;
!import uint16;
!import uint32;
!import int32;
!import u8ascii;

!import u32binary;

!import meta.identified;
!import meta.array;
!import meta.reference;
!import meta.sequence;
!import meta.name;
!import meta.expression;
!import meta.definition;

!import remote.location;
!import remote.object;
!import remote.interface;
!import remote.exception;

(library.list [

/*
 * A stack is an array of items.  In future this could be expanded
 * to array( U16, contained( U16 meta.identified( meta.any ) ) )
 * this would allow each item on the stack to be moved around without
 * actually understanding what the item is.
 */

(library.entry 
	(library.definition u8ascii:"nvm.heap" u8ascii:"1.3")
	(meta.sequence [
		(meta.array 
			(meta.reference #uint16)
			(meta.identified u8utf8:"object")
		)]))
	

(library.entry 
	(library.definition u8ascii:"nvm.instruction.load_crl_host" u8ascii:"1.3")
	(meta.sequence []))

(library.entry 
	(library.definition u8ascii:"nvm.instruction.load_crl_object" u8ascii:"1.3")
	(meta.sequence []))

(library.entry 
	(library.definition u8ascii:"nvm.instruction.load_heap_object" u8ascii:"1.3")
	(meta.sequence [
		(meta.tag u8ascii:"heapIndex" (meta.reference #uint16))
	]))

(library.entry 
	(library.definition u8ascii:"nvm.instruction.named_method_call" u8ascii:"1.3")
	(meta.sequence [
		(meta.tag u8ascii:"methodName" (meta.reference #u8ascii))
		(meta.tag u8ascii:"typeId"
			(meta.array
				(meta.reference #uint8)
				(meta.reference #uint16)
			)
		)]))

(library.entry 
	(library.definition u8ascii:"nvm.instruction.return" u8ascii:"1.3")
	(meta.sequence []))

(library.entry 
	(library.definition u8ascii:"nvm.instruction.store_heap_object" u8ascii:"1.3")
	(meta.sequence [
		(meta.tag u8ascii:"heapIndex" (meta.reference #uint16))
	]))

(library.entry 
	(library.definition u8ascii:"nvm.instruction.to_host" u8ascii:"1.3")
	(meta.sequence []))

(library.entry 
	(library.definition u8ascii:"nvm.instruction" u8ascii:"1.3")
	(meta.abstract [ 
		(meta.abstract.map #nvm.instruction.load_crl_host)
		(meta.abstract.map #nvm.instruction.to_host)
		(meta.abstract.map #nvm.instruction.load_crl_object)
		(meta.abstract.map #nvm.instruction.load_heap_object)
		(meta.abstract.map #nvm.instruction.named_method_call)
		(meta.abstract.map #nvm.instruction.return)
		(meta.abstract.map #nvm.instruction.store_heap_object)
	]))

(library.entry 
	(library.definition u8ascii:"nvm.instructions" u8ascii:"1.3")
	(meta.sequence [
		(meta.array
			(meta.reference #uint16)
			(meta.reference #nvm.instruction))
	]))

/*
 * This virtual machine state includes instructions, heap, program counter
 * and exception state.  
 */

(library.entry 
	(library.definition u8ascii:"nvm.state" u8ascii:"1.3")
	(meta.sequence [
		(meta.tag u8ascii:"programCounter" (meta.reference #uint16))
		(meta.tag u8ascii:"instructions" (meta.reference #nvm.instructions))
		(meta.tag u8ascii:"heap" (meta.reference #nvm.heap))
		(meta.tag u8ascii:"exception" (meta.reference #remote.exception))
	]))


(library.entry 
	(library.definition u8ascii:"nvm.host" u8ascii:"1.3")
	(remote.interface [ ]))

(library.entry 
	(library.relation #nvm.host u8ascii:"1.3" u8ascii:"nvm.host.process")
	(remote.method u8ascii:"process"
		[ (remote.parameter #nvm.state u8ascii:"nvmState" ) ]
		[ (remote.parameter #nvm.state u8ascii:"nvmState" ) ]
		[ #remote.exception ]
	)
)

(library.entry 
	(library.relation #nvm.host u8ascii:"1.3" u8ascii:"nvm.host.getobject")
	(remote.method u8ascii:"getObject"
		[ (remote.parameter #remote.location u8ascii:"metaLocation" ) ]
		[ (remote.parameter #remote.object u8ascii:"metaObject" ) ]
		[ #remote.exception ]
	)
)

])