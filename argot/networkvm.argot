/*
 * Copyright (c) 2003-2010, Live Media Pty. Ltd.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted
 * provided that the following conditions are met:
 *
 *  1. Redistributions of source code must retain the above copyright notice, this list of
 *     conditions and the following disclaimer.
 *  2. Redistributions in binary form must reproduce the above copyright notice, this list of
 *     conditions and the following disclaimer in the documentation and/or other materials
 *     provided with the distribution.
 *  3. Neither the name of Live Media nor the names of its contributors may be used to endorse
 *     or promote products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 
 /* 
 * This is the network virtual machine types.
 */

!load "argot/remote.dictionary", com.argot.remote.RemoteLoader;

!import empty;
!import uint8;
!import uint16;
!import uint32;
!import int32;
!import u8ascii;

!import u32binary;

!import meta.identified;
!import meta.array;
!import meta.reference;
!import meta.sequence;
!import meta.name;
!import meta.expression;
!import meta.definition;

!import remote.location;
!import remote.object;
!import remote.interface;
!import remote.exception;

(library.list [

/*
 * A stack is an array of items.  In future this could be expanded
 * to array( U16, contained( U16 meta.identified( meta.any ) ) )
 * this would allow each item on the stack to be moved around without
 * actually understanding what the item is.
 */

(library.entry
	(library.name meta.name:"nvm")
	(meta.cluster))

(library.entry 
	(library.definition meta.name:"nvm.heap" meta.version:"1.3")
	(meta.sequence [
		(meta.array 
			(meta.reference #uint16)
			(meta.identified u8utf8:"object")
		)]))

(library.entry
	(library.name meta.name:"nvm.instruction")
	(meta.cluster))

(library.entry 
	(library.definition meta.name:"nvm.instruction.load_crl_host" meta.version:"1.3")
	(meta.sequence []))

(library.entry 
	(library.definition meta.name:"nvm.instruction.load_crl_object" meta.version:"1.3")
	(meta.sequence []))

(library.entry 
	(library.definition meta.name:"nvm.instruction.load_heap_object" meta.version:"1.3")
	(meta.sequence [
		(meta.tag u8ascii:"heapIndex" (meta.reference #uint16))
	]))

(library.entry 
	(library.definition meta.name:"nvm.instruction.named_method_call" meta.version:"1.3")
	(meta.sequence [
		(meta.tag u8ascii:"methodName" (meta.reference #u8ascii))
		(meta.tag u8ascii:"typeId"
			(meta.array
				(meta.reference #uint8)
				(meta.reference #uint16)
			)
		)]))

(library.entry 
	(library.definition meta.name:"nvm.instruction.return" meta.version:"1.3")
	(meta.sequence []))

(library.entry 
	(library.definition meta.name:"nvm.instruction.store_heap_object" meta.version:"1.3")
	(meta.sequence [
		(meta.tag u8ascii:"heapIndex" (meta.reference #uint16))
	]))

(library.entry 
	(library.definition meta.name:"nvm.instruction.to_host" meta.version:"1.3")
	(meta.sequence []))

(library.entry 
	(library.definition meta.name:"nvm.instruction.base" meta.version:"1.3")
	(meta.abstract [ 
		(meta.abstract_map #nvm.instruction.load_crl_host)
		(meta.abstract_map #nvm.instruction.to_host)
		(meta.abstract_map #nvm.instruction.load_crl_object)
		(meta.abstract_map #nvm.instruction.load_heap_object)
		(meta.abstract_map #nvm.instruction.named_method_call)
		(meta.abstract_map #nvm.instruction.return)
		(meta.abstract_map #nvm.instruction.store_heap_object)
	]))

(library.entry 
	(library.definition meta.name:"nvm.instructions" meta.version:"1.3")
	(meta.sequence [
		(meta.array
			(meta.reference #uint16)
			(meta.reference #nvm.instruction.base))
	]))

/*
 * This virtual machine state includes instructions, heap, program counter
 * and exception state.  
 */

(library.entry 
	(library.definition meta.name:"nvm.state" meta.version:"1.3")
	(meta.sequence [
		(meta.tag u8ascii:"programCounter" (meta.reference #uint16))
		(meta.tag u8ascii:"instructions" (meta.reference #nvm.instructions))
		(meta.tag u8ascii:"heap" (meta.reference #nvm.heap))
		(meta.tag u8ascii:"exception" (meta.reference #remote.exception))
	]))


(library.entry 
	(library.definition meta.name:"nvm.host" meta.version:"1.3")
	(remote.interface [ ]))

(library.entry 
	(library.relation #nvm.host u8ascii:"1.3" u8ascii:"nvm.host.process")
	(remote.method u8ascii:"process"
		[ (remote.parameter #nvm.state u8ascii:"nvmState" ) ]
		[ (remote.parameter #nvm.state u8ascii:"nvmState" ) ]
		[ #remote.exception ]
	)
)

(library.entry 
	(library.relation #nvm.host u8ascii:"1.3" u8ascii:"nvm.host.getobject")
	(remote.method u8ascii:"getObject"
		[ (remote.parameter #remote.location u8ascii:"metaLocation" ) ]
		[ (remote.parameter #remote.object u8ascii:"metaObject" ) ]
		[ #remote.exception ]
	)
)

])