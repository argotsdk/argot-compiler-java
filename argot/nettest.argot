/*
 * Copyright (c) 2003-2013, Live Media Pty. Ltd.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted
 * provided that the following conditions are met:
 *
 *  1. Redistributions of source code must retain the above copyright notice, this list of
 *     conditions and the following disclaimer.
 *  2. Redistributions in binary form must reproduce the above copyright notice, this list of
 *     conditions and the following disclaimer in the documentation and/or other materials
 *     provided with the distribution.
 *  3. Neither the name of Live Media nor the names of its contributors may be used to endorse
 *     or promote products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

!load "argot/remote.dictionary", com.argot.remote.RemoteLoader;
!load "argot/networkvm.dictionary";
!load "argot/channel.dictionary";

!import remote.location;
!import remote.exception;
!import remote.exception_basic;
!import remote.stack_trace_element;

!import uint16;
!import u8ascii;
!import empty;
!import uint8;
!import uint32;
!import int32;

!import channel.id;
!import channel.input;
!import channel.output;
!import channel.pipe;


(library.list [

(library.entry 
	(library.definition meta.name:"testvalue" meta.version:"1.3")
	(meta.sequence [
		(meta.tag u8ascii:"x" (meta.reference #uint8))
		(meta.tag u8ascii:"str" (meta.reference #u8ascii))
	])
)

(library.entry 
	(library.definition meta.name:"test_exception" meta.version:"1.3")
	(meta.sequence [
		(meta.reference #remote.exception_basic)
	]))

(library.entry 
	(library.relation #remote.exception u8ascii:"1.3" u8ascii:"test_exception")
	(meta.abstract_map #test_exception))

(library.entry 
	(library.definition meta.name:"test" meta.version:"1.3")
	(remote.interface))

(library.entry 
	(library.relation #test u8ascii:"1.3" u8ascii:"doSomething")
	(remote.method u8ascii:"doSomething"
		[ (remote.parameter #int32 u8ascii:"param" ) ]
		[ (remote.parameter #int32 u8ascii:"ret" ) ]
		[ #int32 ]
	)
)

/* public int methodWithException( int x ) throws RemoteException; */

(library.entry 
	(library.relation #test u8ascii:"1.3" u8ascii:"methodWithException")
	(remote.method u8ascii:"methodWithException"
		[ (remote.parameter #int32 u8ascii:"x") ]
		[ (remote.parameter #int32 u8ascii:"ret") ]
		[ #remote.exception ]
	)
)
	
/* public void methodUndeclaredException(); */

(library.entry 
	(library.relation #test u8ascii:"1.3" u8ascii:"methodUndeclaredException")
	(remote.method u8ascii:"methodUndeclaredException"
		[  ]
		[  ]
		[  ]
	)
)

/* public void methodCustomException() throws TestException; */

(library.entry 
	(library.relation #test u8ascii:"1.3" u8ascii:"methodCustomException")
	(remote.method u8ascii:"methodCustomException"
		[  ]
		[  ]
		[ #test_exception ]
	)
)

/* public void methodNoReturn( int x ); */

(library.entry 
	(library.relation #test u8ascii:"1.3" u8ascii:"methodNoReturn")
	(remote.method u8ascii:"methodNoReturn" 
		[ (remote.parameter #int32 u8ascii:"x") ]
		[ ]
		[ ]
	)
)
	
/* public void methodNoParam(); */

(library.entry 
	(library.relation #test u8ascii:"1.3" u8ascii:"methodNoParam")
	(remote.method u8ascii:"methodNoParam"
		[] [] []
	)
)

	
/* public void methodComplexParam( TestValue value ); */

(library.entry 
	(library.relation #test u8ascii:"1.3" u8ascii:"methodComplexParam")
	(remote.method u8ascii:"methodComplexParam"
		[ (remote.parameter #testvalue u8ascii:"x" ) ]
		[ ]
		[ ]
	)
)
	
/* public TestValue methodComplexReturn( int x ); */

(library.entry 
	(library.relation #test u8ascii:"1.3" u8ascii:"methodComplexReturn")
	(remote.method u8ascii:"methodComplexReturn"
		[ (remote.parameter #int32 u8ascii:"x" ) ]
		[ (remote.parameter #testvalue u8ascii:"ret" ) ]
		[ ]
	)
)

(library.entry 
	(library.definition meta.name:"test_channel" meta.version:"1.3")
	(remote.interface))

(library.entry 
	(library.relation #test_channel u8ascii:"1.3" u8ascii:"sendInputStream")
	(remote.method u8ascii:"sendInputStream"
		[ (remote.parameter #channel.input u8ascii:"input") ]
		[ (remote.parameter #u8ascii u8ascii:"result") ]
		[ ]
	)
)

(library.entry 
	(library.relation #test_channel u8ascii:"1.3" u8ascii:"receiveInputStream")
	(remote.method u8ascii:"receiveInputStream"
		[ (remote.parameter #u8ascii u8ascii:"input") ]
		[ (remote.parameter #channel.input u8ascii:"result") ]
		[ ]
	)
)

(library.entry 
	(library.relation #test_channel u8ascii:"1.3" u8ascii:"sendOutputStream")
	(remote.method u8ascii:"sendOutputStream"
		[ (remote.parameter #channel.output u8ascii:"output")
		  (remote.parameter #u8ascii u8ascii:"input") ]
		[ ]
		[ ]
	)
)

(library.entry 
	(library.relation #test_channel u8ascii:"1.3" u8ascii:"receiveOutputStream")
	(remote.method u8ascii:"receiveOutputStream"
		[ ]
		[ (remote.parameter #channel.output u8ascii:"output") ]
		[ ]
	)
)

(library.entry 
	(library.relation #test_channel u8ascii:"1.3" u8ascii:"sendEndPoint")
	(remote.method u8ascii:"sendEndPoint"
		[ (remote.parameter #channel.pipe u8ascii:"endpoint") ]
		[ ]
		[ ]
	)
)

(library.entry 
	(library.relation #test_channel u8ascii:"1.3" u8ascii:"receiveEndPoint")
	(remote.method u8ascii:"receiveEndPoint"
		[ ]
		[ (remote.parameter #channel.pipe u8ascii:"endpoint") ]
		[ ]
	)
)


])