/*
 * Copyright 2003-2005 (c) Live Media Pty Ltd. <argot@einet.com.au> 
 *
 * This software is licensed under the Argot Public License 
 * which may be found in the file LICENSE distributed 
 * with this software.
 *
 * More information about this license can be found at
 * http://www.einet.com.au/License
 * 
 * The Developer of this software is Live Media Pty Ltd,
 * PO Box 4591, Melbourne 3001, Australia.  The license is subject 
 * to the law of Victoria, Australia, and subject to exclusive 
 * jurisdiction of the Victorian courts.
 */
 
 /*
 * The meta dictionary.
 *
 * This is the core dictionary used to describe data types.
 *
 */
(dictionary.source [

/*
 * The empty type is used for tagging information.  It is a 
 * basic type that is empty.
 * EMPTY_ID 1
 */

(meta.structure meta.name:"empty" 
	(meta.fixed_width uint8:0 
		[ (meta.fixed_width.attribute.size uint8:0) ] ))

/*
 * The u8 type is unsigned 8bit big endian.
 * UINT8_ID 2
 */

(meta.structure meta.name:"uint8" 
	(meta.fixed_width uint8:8 
		[ (meta.fixed_width.attribute.size uint8:8)
		  (meta.fixed_width.attribute.integer)
		  (meta.fixed_width.attribute.unsigned)
		  (meta.fixed_width.attribute.bigendian) ] ))

/*
 * The u16 type is unsigned 16bit big endian.
 * UINT16_ID 3
 */

(meta.structure meta.name:"uint16" 
	(meta.fixed_width uint8:16
		[ (meta.fixed_width.attribute.size uint8:16)
		  (meta.fixed_width.attribute.integer)
		  (meta.fixed_width.attribute.unsigned)
		  (meta.fixed_width.attribute.bigendian) ] ))


/*
 * meta.id is used to identify a type.
 * META_ID_ID 4
 */
 
(meta.structure meta.name:"meta.id" (meta.reference #uint16))

/*
 * A type defined as abstract has an empty definition.
 * META_ABSTRACT_ID 5
 */

(meta.structure meta.name:"meta.abstract" (meta.sequence []))
				
/*
 * A map is used to map an abstract data type to a
 * concrete data type.  Two U16 values are used to specify
 * the data types in the dictionary being defined.
 * META_MAP_ID 6
 */

(meta.structure meta.name:"meta.map" (meta.sequence [
	(meta.tag u8ascii:"abstract" (meta.reference #meta.id))
	(meta.tag u8ascii:"concrete" (meta.reference #meta.id))
	]))


/*
 * u8ascii is a simple ASCII encoded string of maxiumum length 255
 * characters.
 * U8ASCII_ID 7
 */

(meta.structure meta.name:"u8ascii" 
	(meta.encoding 
		(meta.array 
			(meta.reference #uint8) 
			(meta.reference #uint8) 
		)
		u8ascii:"ISO646-US" )) 

/*
 *  meta.name defines all type names.  Its a simple u8ascii string.
 *  META_NAME_ID 8
 */

(meta.structure meta.name:"meta.name" (meta.reference #u8ascii))

/*
 *  An expression is an abstract type. It allows different
 *  expressions to be used to define data types.  New expressions
 *  can be added to expand specification language.
 *  META_EXPRESSION_ID 9
 */

(meta.structure meta.name:"meta.expression" (meta.abstract))


/*
 *  A reference delcares a usage of another data tpye
 *  in the system.  The name data type is used to define
 *  a description of usage of that data type.
 *  META_REFERENCE_ID 10
 */

(meta.structure meta.name:"meta.reference" (meta.sequence [(meta.reference #meta.id)]))
		
/*
 *  A tag is used to label a part of a sequence.  It is only
 *  used as meta data.
 *  META_TAG_ID 11
 */
 
(meta.structure meta.name:"meta.tag" (meta.sequence [
			(meta.tag u8ascii:"name" (meta.reference #u8ascii))
			(meta.tag u8ascii:"data" (meta.reference #meta.expression))]))

		
/*
 *  A sequence defines a set of expressions which
 *  are executed in order.  In the most normal case,
 *  it defines an ordered set of types in a data buffer.
 *  META_SEQUENCE_ID 12
 */

(meta.structure meta.name:"meta.sequence" (meta.sequence [(meta.array 
			(meta.reference #uint8)
			(meta.reference #meta.expression))]))

		
/*
 *  An Array is used to define any collection of data with
 *  a size and a type.
 *  META_ARRAY_ID 13
 */
		
(meta.structure meta.name:"meta.array" (meta.sequence [
	(meta.tag u8ascii:"size" (meta.reference #meta.expression))
	(meta.tag u8ascii:"data" (meta.reference #meta.expression))]))

/*
 *  An envelop is used to wrap any data.  This allows a group of data
 *  to be read without actually being decoded.  The decoding can take
 *  place when required.
 *  META_ENVELOP_ID 14
 */

(meta.structure meta.name:"meta.envelop" (meta.sequence [
		(meta.tag u8ascii:"size" (meta.reference #meta.expression))
		(meta.tag u8ascii:"type" (meta.reference #meta.id)) ]))

/*
 *  Encoding specifies the data encoding used on a character
 *  string.  The data expression must return an array that
 *  can have encoding applied.
 *  META_ENCODING_ID 15
 */

(meta.structure meta.name:"meta.encoding" (meta.sequence [
			(meta.tag u8ascii:"data" (meta.reference #meta.expression))
			(meta.tag u8ascii:"encoding" (meta.reference #u8ascii))]))

/*
 * Basic types are defined by a width and set of flags.
 * META_FIXED_WIDTH_ID 16 
 */

(meta.structure meta.name:"meta.fixed_width" 
	(meta.sequence [
		(meta.tag u8ascii:"size" (meta.reference #uint8))
		(meta.tag u8ascii:"flags" 
			(meta.array 
				(meta.reference #uint8)
				(meta.reference #meta.fixed_width.attribute)))]))

/* META_BASIC_ATTRIBUTE_ID 17 */
(meta.structure meta.name:"meta.fixed_width.attribute" (meta.abstract))

/* META_BASIC_ATTRIBUTE_SIZE_ID 18 */
(meta.structure meta.name:"meta.fixed_width.attribute.size" (meta.sequence [(meta.tag u8ascii:"size" (meta.reference #uint16))]))

/* META_BASIC_ATTRIBUTE_INTEGER_ID 19 */
(meta.structure meta.name:"meta.fixed_width.attribute.integer" (meta.sequence []))

/* META_BASIC_ATTRIBUTE_UNSIGNED_ID 20 */
(meta.structure meta.name:"meta.fixed_width.attribute.unsigned" (meta.sequence []))

/* META_BASIC_ATTRIBUTE_SIGNED_ID 21 */
(meta.structure meta.name:"meta.fixed_width.attribute.signed" (meta.sequence []))

/* META_BASIC_ATTRIBUTE_BIGENDIAN_ID 22 */
(meta.structure meta.name:"meta.fixed_width.attribute.bigendian" (meta.sequence[]))

/* META_BASIC_ATTRIBUTE_TO_SIZE_ID 23 */
(meta.map #meta.fixed_width.attribute #meta.fixed_width.attribute.size)

/* META_BASIC_ATTRIBUTE_TO_INTEGER_ID 24 */
(meta.map #meta.fixed_width.attribute #meta.fixed_width.attribute.integer)

/* META_BASIC_ATTRIBUTE_TO_UNSIGNED_ID 25 */
(meta.map #meta.fixed_width.attribute #meta.fixed_width.attribute.unsigned)

/* META_BASIC_ATTRIBUTE_TO_SIGNED_ID 26 */
(meta.map #meta.fixed_width.attribute #meta.fixed_width.attribute.signed)

/* META_BASIC_ATTRIBUTE_TO_BIGENDIAN_ID 27 */
(meta.map #meta.fixed_width.attribute #meta.fixed_width.attribute.bigendian)

			
/*
 *  Mappings from abstract expressions to concrete expressions.
 */

/* META_EXPRESSION_TO_REFERENCE_ID 28 */
(meta.map #meta.expression #meta.reference)

/* META_EXPRESSION_TO_TAG_ID 29 */
(meta.map #meta.expression #meta.tag)

/* META_EXPRESSION_TO_SEQUENCE_ID 30 */
(meta.map #meta.expression #meta.sequence)

/* META_EXPRESSION_TO_ARRAY_ID 31 */
(meta.map #meta.expression #meta.array)

/* META_EXPRESSION_TO_ENVELOP_ID 32 */
(meta.map #meta.expression #meta.envelop)

/* META_EXPRESSION_TO_ENCODING_ID 33 */
(meta.map #meta.expression #meta.encoding)

/* DEFINITION_ID 34 */
(meta.structure meta.name:"meta.definition" (meta.abstract))

/* DEFINITION_TO_FIXED_WIDTH 35 */
(meta.map #meta.definition #meta.fixed_width)

/* DEFINITION_TO_MAP 36 */
(meta.map #meta.definition #meta.map)

/* DEFINITION_TO_ABSTRACT 37 */
(meta.map #meta.definition #meta.abstract)

/* DEFINITION_TO_EXPRESSION 38 */
(meta.map #meta.definition #meta.expression)

/* DEFINITION_ENVELOP 39 */
(meta.structure meta.name:"meta.definition.envelop"
	(meta.envelop 
		(meta.reference #uint16)
		(meta.reference #meta.definition)
	)
)

/* DEFINITION_ENTRY_ID 40 */
(meta.structure meta.name:"dictionary.entry"
	(meta.sequence [
		(meta.tag u8ascii:"id" (meta.reference #meta.id))
		(meta.tag u8ascii:"name" (meta.reference #meta.name))
		(meta.tag u8ascii:"definition" (meta.reference #meta.definition.envelop))  
	])
)
			
/* DEFINITION_ENTRY_LIST_ID 41 */
(meta.structure meta.name:"dictionary.entry.list"
	(meta.array 
		(meta.reference #uint16)
		(meta.reference #dictionary.entry )))

])