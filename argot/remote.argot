/*
 * Copyright 2003-2005 (c) Live Media Pty Ltd. <argot@einet.com.au> 
 *
 * This software is licensed under the Argot Public License 
 * which may be found in the file LICENSE distributed 
 * with this software.
 *
 * More information about this license can be found at
 * http://www.einet.com.au/License
 * 
 * The Developer of this software is Live Media Pty Ltd,
 * PO Box 4591, Melbourne 3001, Australia.  The license is subject 
 * to the law of Victoria, Australia, and subject to exclusive 
 * jurisdiction of the Victorian courts.
 */

!import empty;
!import u8ascii;
!import uint8;
!import uint16;
!import meta.definition;
!import int32;

(dictionary.source [

/* Remote Interfaces and Object definitions */

(meta.structure meta.name:"remote.parameter"
	(meta.sequence [
		(meta.tag u8ascii:"type" (meta.reference #uint16))
		(meta.tag u8ascii:"name" (meta.reference #u8ascii))
	]))

(meta.structure meta.name:"remote.method"
	(meta.sequence [
		(meta.tag u8ascii:"interface" (meta.reference #uint16))
		(meta.tag u8ascii:"name" (meta.reference #u8ascii))
		(meta.tag u8ascii:"request"
			(meta.array (meta.reference #uint8) (meta.reference #remote.parameter)))
		(meta.tag u8ascii:"response"
			(meta.array (meta.reference #uint8) (meta.reference #remote.parameter)))
		(meta.tag u8ascii:"error"
			(meta.array (meta.reference #uint8) (meta.reference #uint16)))
	]))

(meta.structure meta.name:"remote.interface"
	(meta.sequence [
		(meta.array 
			(meta.reference #uint8)
			(meta.reference #uint16)
		)
	])
)

(meta.abstract.map #meta.definition #remote.interface)
(meta.abstract.map #meta.definition #remote.method)

(meta.structure meta.name:"remote.location" (meta.abstract))

(meta.structure meta.name:"remote.object" (meta.sequence [
	(meta.tag u8ascii:"location" (meta.reference #remote.location))
	(meta.tag u8ascii:"class" (meta.reference #uint16))
]))

(meta.structure meta.name:"remote.exception" (meta.abstract))


/* allow exceptions to be null */
(meta.abstract.map #remote.exception #empty)

(meta.structure meta.name:"remote.stack_trace_element" (meta.sequence [
	(meta.tag u8ascii:"className" (meta.reference #u8ascii))
	(meta.tag u8ascii:"methodName" (meta.reference #u8ascii))
	(meta.tag u8ascii:"fileName" (meta.reference #u8ascii))
	(meta.tag u8ascii:"lineNumber" (meta.reference #int32))
])) 

/* Most exceptions will have the following */

(meta.structure meta.name:"remote.exception.basic" 
	(meta.sequence [
		(meta.tag u8ascii:"reason" (meta.reference #u8ascii))
		(meta.tag u8ascii:"cause" (meta.reference #remote.exception))
		(meta.tag u8ascii:"stacktrace"
			(meta.array
				(meta.reference #uint16)
				(meta.reference #remote.stack_trace_element)
			)
		)
	])
)

/* This is the default wrapped exception */

(meta.structure meta.name:"remote.exception.wrapped"
	(meta.sequence [
		(meta.reference #remote.exception.basic)
	])
)

(meta.abstract.map #remote.exception #remote.exception.wrapped)

])
 