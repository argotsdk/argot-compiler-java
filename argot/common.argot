/*
 * Copyright 2003-2005 (c) Live Media Pty Ltd. <argot@einet.com.au> 
 *
 * This software is licensed under the Argot Public License 
 * which may be found in the file LICENSE distributed 
 * with this software.
 *
 * More information about this license can be found at
 * http://www.einet.com.au/License
 * 
 * The Developer of this software is Live Media Pty Ltd,
 * PO Box 4591, Melbourne 3001, Australia.  The license is subject 
 * to the law of Victoria, Australia, and subject to exclusive 
 * jurisdiction of the Victorian courts.
 */
 
!import meta.fixed_width;
!import meta.fixed_width.attribute;
!import meta.expression;
!import meta.sequence;
!import meta.reference;
!import meta.name;

(dictionary.source [

/*
 *  The empty data type does not read any data. Like a NOP for Argot.
 */
 
(meta.structure meta.name:"empty" 
	(meta.fixed_width uint8:0 
		[ (meta.fixed_width.attribute.size uint8:0) ] 
	) 
)
		
/*
 *  Unsigned data types (big endian network order).
 */

(meta.structure meta.name:"uint8" 
	(meta.fixed_width uint8:8 
		[ (meta.fixed_width.attribute.size uint8:8)
		  (meta.fixed_width.attribute.integer)
		  (meta.fixed_width.attribute.unsigned)
		  (meta.fixed_width.attribute.bigendian) ]
	)
)


(meta.structure meta.name:"uint16" 
	(meta.fixed_width uint8:16
		[ (meta.fixed_width.attribute.size uint8:16)
		  (meta.fixed_width.attribute.integer)
		  (meta.fixed_width.attribute.unsigned)
		  (meta.fixed_width.attribute.bigendian) ] 
	)
)

(meta.structure meta.name:"uint32" 
	(meta.fixed_width uint8:32
		[ (meta.fixed_width.attribute.size uint8:32)
		  (meta.fixed_width.attribute.integer)
		  (meta.fixed_width.attribute.unsigned)
		  (meta.fixed_width.attribute.bigendian) ] 
	)
)

(meta.structure meta.name:"uint64" 
	(meta.fixed_width uint8:64
		[ (meta.fixed_width.attribute.size uint8:64)
		  (meta.fixed_width.attribute.integer)
		  (meta.fixed_width.attribute.unsigned)
		  (meta.fixed_width.attribute.bigendian) ] 
	)
)

/*
 *  Signed data types (big endian network order).
 */

(meta.structure meta.name:"int8" 
	(meta.fixed_width uint8:8 
		[ (meta.fixed_width.attribute.size uint8:8)
		  (meta.fixed_width.attribute.integer)
		  (meta.fixed_width.attribute.signed)
		  (meta.fixed_width.attribute.bigendian) ] 
	)
)


(meta.structure meta.name:"int16" 
	(meta.fixed_width uint8:16
		[ (meta.fixed_width.attribute.size uint8:16)
		  (meta.fixed_width.attribute.integer)
		  (meta.fixed_width.attribute.signed)
		  (meta.fixed_width.attribute.bigendian) ] 
	)
)

(meta.structure meta.name:"int32" 
	(meta.fixed_width uint8:32
		[ (meta.fixed_width.attribute.size uint8:32)
		  (meta.fixed_width.attribute.integer)
		  (meta.fixed_width.attribute.signed)
		  (meta.fixed_width.attribute.bigendian) ] 
	)
)

(meta.structure meta.name:"int64" 
	(meta.fixed_width uint8:64
		[ (meta.fixed_width.attribute.size uint8:64)
		  (meta.fixed_width.attribute.integer)
		  (meta.fixed_width.attribute.signed)
		  (meta.fixed_width.attribute.bigendian) ]
	)
)


/*
 *  Floats and Double.
 */
 
(meta.structure meta.name:"float" 
	(meta.fixed_width uint8:32
		[ (meta.fixed_width.attribute.size uint8:32)
		/*  (meta.fixed_width.attribute.IEEE756) */
		  (meta.fixed_width.attribute.signed) ]
	)
)

(meta.structure meta.name:"double" 
	(meta.fixed_width uint8:64
		[ (meta.fixed_width.attribute.size uint8:64)
		/*  (meta.fixed_width.attribute.IEEE756) */
		  (meta.fixed_width.attribute.signed) ] 
	)
)


/*
 *  Boolean value is a byte that can be 0 false..  !0 true.
 */
 
(meta.structure meta.name:"bool" (meta.reference #uint8))


/*
 *  An ascii encoded string.  Maximum size 255 bytes.
 */

(meta.structure meta.name:"u8ascii"
	(meta.encoding
		(meta.array
			(meta.reference #uint8)
			(meta.reference #uint8)
		)
		u8ascii:"ISO646-US"
	)
)
	
/*
 *  A UTF8 encoded string.  Maximum size u32.max bytes.
 */		

(meta.structure meta.name:"u32utf8"
	(meta.encoding
		(meta.array
			(meta.reference #uint32)
			(meta.reference #uint8)
		)
		u8ascii:"UTF8"
	)
)

/*
 *  A binary data block.  Maximum size u32.max.
 */

(meta.structure meta.name:"u32binary"
	(meta.array
		(meta.reference #uint32)
		(meta.reference #uint8)
	)
)

/*
 * A binary data block.  Maximum size u16.max
 */ 

(meta.structure meta.name:"u16binary"
	(meta.array
		(meta.reference #uint16)
		(meta.reference #uint8)
	)
)
	
/*
 * Allows any data to be loaded.
 */

(meta.structure meta.name:"meta.identified"
	(meta.sequence [
		(meta.tag u8ascii:"description" (meta.reference #meta.name))
	])
)

(meta.map #meta.expression #meta.identified)
		

/*
 * Date is an abstract type that can be defined using various methods.
 */

(meta.structure meta.name:"date" (meta.abstract))

/*
 *  A Java data is the number of milliseconds (or is it seconds) from 1st of Janurary 1970.
 */

(meta.structure meta.name:"date.java" (meta.sequence [ (meta.reference #int64) ]))

(meta.map #date #date.java)

])