/*
 * Copyright 2003-2009 (c) Live Media Pty Ltd. <argot@einet.com.au> 
 *
 * This software is licensed under the Argot Public License 
 * which may be found in the file LICENSE distributed 
 * with this software.
 *
 * More information about this license can be found at
 * http://www.einet.com.au/License
 * 
 * The Developer of this software is Live Media Pty Ltd,
 * PO Box 4591, Melbourne 3001, Australia.  The license is subject 
 * to the law of Victoria, Australia, and subject to exclusive 
 * jurisdiction of the Victorian courts.
 */
 
!import meta.atom;
!import meta.atom_attribute;
!import meta.expression;
!import meta.sequence;
!import meta.reference;
!import meta.name;


(library.list [


/*
 *  The empty data type does not read any data. Like a NOP for Argot.
 */
 
/*
 * The empty type is used for tagging information.  It is a 
 * basic type that is empty.
 * EMPTY_ID 1
 */

(library.entry 
	(library.definition meta.name:"empty" meta.version:"1.3")	
	(meta.atom uvint28:0 uvint28:0
		[ (meta.attribute.size uvint28:0) ]))
		
/*
 *  Unsigned data types (big endian network order).
 */

(library.entry
	(library.definition meta.name:"uint8" meta.version:"1.3")
	(meta.atom uvint28:8 uvint28:8
		[ (meta.attribute.size uvint28:8)
	  	  (meta.attribute.integer)
	  	  (meta.attribute.unsigned)
	  	  (meta.attribute.bigendian) ] ))


(library.entry
	(library.definition meta.name:"uint16" meta.version:"1.3")
	(meta.atom uvint28:16 uvint28:16
	[ (meta.attribute.size uvint28:16)
	  (meta.attribute.integer)
	  (meta.attribute.unsigned)
	  (meta.attribute.bigendian) ] ))



(library.entry
	(library.definition meta.name:"uint32" meta.version:"1.3")
	(meta.atom uvint28:32 uvint28:32
	[ (meta.attribute.size uvint28:32)
	  (meta.attribute.integer)
	  (meta.attribute.unsigned)
	  (meta.attribute.bigendian) ] ))

(library.entry
	(library.definition meta.name:"uint64" meta.version:"1.3")
	(meta.atom uvint28:64 uvint28:64
	[ (meta.attribute.size uvint28:64)
	  (meta.attribute.integer)
	  (meta.attribute.unsigned)
	  (meta.attribute.bigendian) ] ))

/*
 *  Signed data types (big endian network order).
 */

(library.entry
	(library.definition meta.name:"int8" meta.version:"1.3")
	(meta.atom uvint28:8 uvint28:8
	[ (meta.attribute.size uvint28:8)
	  (meta.attribute.integer)
	  (meta.attribute.signed) 
	  (meta.attribute.bigendian) ] ))

(library.entry
	(library.definition meta.name:"int16" meta.version:"1.3")
	(meta.atom uvint28:16 uvint28:16
	[ (meta.attribute.size uvint28:16)
	  (meta.attribute.integer)
	  (meta.attribute.signed) 
	  (meta.attribute.bigendian) ] ))

(library.entry
	(library.definition meta.name:"int32" meta.version:"1.3")
	(meta.atom uvint28:32 uvint28:32
	[ (meta.attribute.size uvint28:32)
	  (meta.attribute.integer)
	  (meta.attribute.signed) 
	  (meta.attribute.bigendian) ] ))

(library.entry
	(library.definition meta.name:"int64" meta.version:"1.3")
	(meta.atom uvint28:64 uvint28:64
	[ (meta.attribute.size uvint28:64)
	  (meta.attribute.integer)
	  (meta.attribute.signed)
	  (meta.attribute.bigendian) ] ))


/*
 *  Floats and Double.
 */

(library.entry
	(library.definition meta.name:"float" meta.version:"1.3") 
	(meta.atom uvint28:32 uvint28:32
		[ (meta.attribute.size uvint28:32)
		  (meta.attribute.IEEE756) 
		  (meta.attribute.signed)  ]))


(library.entry 
	(library.definition meta.name:"double" meta.version:"1.3") 
	(meta.atom uvint28:64 uvint28:64
		[ (meta.attribute.size uvint28:64)
		  (meta.attribute.IEEE756) 
		  (meta.attribute.signed)  ]))


/*
 *  Boolean value is a byte that can be 0 false..  !0 true.
 */


(library.entry
	(library.definition meta.name:"bool" meta.version:"1.3")
	(meta.reference #uint8))


/*
 *  An ascii encoded string.  Maximum size 255 bytes.
 */

(library.entry
	(library.definition meta.name:"u8ascii" meta.version:"1.3")
	(meta.encoding
		(meta.array
			(meta.reference #uint8)
			(meta.reference #uint8))
		u8ascii:"ISO646-US"))

(library.entry
	(library.definition meta.name:"u8utf8" meta.version:"1.3")
	(meta.encoding
		(meta.array
			(meta.reference #uint8)
			(meta.reference #uint8))
		u8ascii:"UTF-8"))
	
/*
 *  A UTF8 encoded string.  Maximum size u32.max bytes.
 */		

(library.entry
	(library.definition meta.name:"u32utf8" meta.version:"1.3")
	(meta.encoding
		(meta.array
			(meta.reference #uint32)
			(meta.reference #uint8))
		u8ascii:"UTF-8"))

/*
 *  A binary data block.  Maximum size u32.max.
 */


(library.entry
	(library.definition meta.name:"u32binary" meta.version:"1.3")
	(meta.array
		(meta.reference #uint32)
		(meta.reference #uint8)))

/*
 * A binary data block.  Maximum size u16.max
 */ 

(library.entry
	(library.definition meta.name:"u16binary" meta.version:"1.3")
	(meta.array
		(meta.reference #uint16)
		(meta.reference #uint8)))
	
/*
 * Allows any data to be loaded.
 */

(library.entry
	(library.definition meta.name:"meta.identified" meta.version:"1.3")
	(meta.sequence [
		(meta.tag u8ascii:"description" (meta.reference #u8utf8))
	]))

(library.entry
	(library.relation #meta.expression u8ascii:"1.3" u8ascii:"identified")
	(meta.abstract_map #meta.identified))
		

/*
 * Date is an abstract type that can be defined using various methods.
 */


(library.entry
	(library.definition meta.name:"date" meta.version:"1.3")
	(meta.abstract []))

/*
 *  A Java data is the number of milliseconds (or is it seconds) from 1st of Janurary 1970.
 */


(library.entry
	(library.definition meta.name:"date_java" meta.version:"1.3")
	(meta.sequence [ (meta.reference #int64) ]))

(library.entry
	(library.relation #date u8ascii:"1.3" u8ascii:"java")
	(meta.abstract_map #date_java))

])