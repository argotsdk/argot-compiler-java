/*
 * Copyright (c) 2003-2010, Live Media Pty. Ltd.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted
 * provided that the following conditions are met:
 *
 *  1. Redistributions of source code must retain the above copyright notice, this list of
 *     conditions and the following disclaimer.
 *  2. Redistributions in binary form must reproduce the above copyright notice, this list of
 *     conditions and the following disclaimer in the documentation and/or other materials
 *     provided with the distribution.
 *  3. Neither the name of Live Media nor the names of its contributors may be used to endorse
 *     or promote products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 
import s32;
import u16;
import u8ascii;
import empty;
import u8;

load "networkvm.dictionary";


import nvm.exception.remote;
import nvm.exception.trace;
import nvm.exception;

load "kb.dictionary";

import knowledgeexception;
import u8ascii;
import s64;

KnowledgeBase: remote.interface();

KnowledgeBase.getTopicIdByPath: remote.method( #KnowledgeBase, "getTopicIdByPath",
	[ remote.parameter( #u8ascii, "path" ) ],
	[ remote.parameter( #s64, "id" ) ],
	[ #knowledgeexception ]
	);

KnowledgeBase.getTopic: remote.method( #KnowledgeBase, "getTopic",
	[ remote.parameter( #s64, "topicId" ) ],
	[ remote.parameter( #topic, "topic" ) ],
	[ #knowledgeexception ]
	);


KnowledgeBase.getChildren: remote.method( #KnowledgeBase, "getChildren",
	[ remote.parameter( #s64, "id" ) ],
	[ remote.parameter( #topiclist, "topics" ) ],
	[ #knowledgeexception ]
	);

KnowledgeBase.getVersionHistory: remote.method( #KnowledgeBase, "getVersionHistory",
	[ remote.parameter( #s64, "id" ) ],
	[ remote.parameter( #topiclist, "topics" ) ],
	[ #knowledgeexception ]
	);	


KnowledgeBase.getPopular: remote.method( #KnowledgeBase, "getPopular",
	[ ],
	[ remote.parameter( #topiclist, "topics" ) ],
	[ #knowledgeexception ]
	);

KnowledgeBase.getRecent: remote.method( #KnowledgeBase, "getRecent",
	[ ],
	[ remote.parameter( #topiclist, "topics" ) ],
	[ #knowledgeexception ]
	);

/*

	public Topic updateTopic( String userSession, Topic topic )
	throws UserException, KnowledgeException;

	public Topic createTopic( String userSession, long pid, int type )
	throws UserException, KnowledgeException;

	public Topic saveTopic( String userSession, Topic topic )
	throws UserException, KnowledgeException;
	
	public void moveTopic( String userSession, long id, long dest )
	throws UserException, KnowledgeException;

*/